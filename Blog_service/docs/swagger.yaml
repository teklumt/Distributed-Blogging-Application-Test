definitions:
  domain.Blog:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  domain.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user_id:
        type: integer
    type: object
  domain.ErrorResponse:
    properties:
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact: {}
paths:
  /blog/create:
    post:
      consumes:
      - application/json
      description: Create a new blog post
      parameters:
      - description: Blog data
        in: body
        name: blog
        required: true
        schema:
          $ref: '#/definitions/domain.Blog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Create Blog
      tags:
      - Blog
  /blog/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a blog post by its ID
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Blog deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Delete Blog
      tags:
      - Blog
  /blog/get:
    get:
      consumes:
      - application/json
      description: Retrieve all blog posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Blog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get All Blogs
      tags:
      - Blog
  /blog/get/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a blog post by its ID
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get Blog by ID
      tags:
      - Blog
  /blog/get/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all blog posts by a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Blog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get Blog by User ID
      tags:
      - Blog
  /blog/update:
    put:
      consumes:
      - application/json
      description: Update an existing blog post
      parameters:
      - description: Updated Blog Data
        in: body
        name: blog
        required: true
        schema:
          $ref: '#/definitions/domain.Blog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Update Blog
      tags:
      - Blog
  /comment/create:
    post:
      consumes:
      - application/json
      description: Create a comment for a blog post
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/domain.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Create Comment
      tags:
      - Comment
  /comment/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Delete Comment
      tags:
      - Comment
  /comment/get/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all comments for a specific blog post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Comment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get Comments by Post ID
      tags:
      - Comment
  /comment/get/comment/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get Comment by ID
      tags:
      - Comment
  /comment/get/user/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve all comments made by a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Comment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get Comments by User ID
      tags:
      - Comment
swagger: "2.0"
